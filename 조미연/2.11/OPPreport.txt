1.OOP(Object Orientes Programming)
- OOP는 말그대로 객제 지향적인 프로그래밍을 뜻한다. C언어같은 절차지향적인 프로그래밍이 아닌 객체의 관점에서 프로그래밍을 한다는 것이다. OOP는 객체를 기준으로 코드를 나누어 구현한다. 자바의 경우 그 구성 부분 단위가 클래스이다. 자세히 말하자면 클래스는 설계도고 직접 일을 하는 구현체는 인스턴스다.
==> 클래스라는 객체를 만들어 기본 틀을 잡고, 그것을 기준으로 구현하는 프로그래밍인 것같다.

2.Object
- 객체랑 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신과 다른 것을 식별 가능 한 것을 말한다. 예를 들어 물리적으로 존재하는 학생, 회원 등과 추상적인 생산, 주문, 배송 등이 모두 객체가 될 수 있다.
- 객체는 속성과 동작으로 구성되어 있다. 예를 들면 사람의 속성으로는 이름, 나이 등이 있다. 그리고 동작은 달리다, 공부하다 등이 있다. 자바에서 이러한 객체의 속성을 필드, 동작을 메소드라고 한다.
==>클래스(객체)라는 것을 만들어 그안에 필드, 메소드를 만드는 개념인 것같다. 이것을 기준으로 실행되는 것이 자바.

3.Class
- 클래스는 유사한 특징을 지닌 객체들의 속성과 동작을 묶어놓은 집합체이다. 예를 들어 학생이라는 클래스를 만든다면 이름, 학번, 전공 등을 속성으로 둘 수 있다.
==> 위 1~2번과 연결된 개념이고, 클래스라는 것이 기본적인 틀이되는 것같다. 예를 들면 설계도같은 느낌이다. 자바는 OOP이기때문에  class(=객체)가 필수적인 요소인 것같다. 자바를 사용할 때 제일 기초되는 개념이란 생각이 든다.

4. Abstraction(추상화)
- 추상화란 여러 객체에 공통적으로 사용되는, 사용되어야 하는 내용을 뽑아내는 것을 말한다. 예를들면 치즈/떡라면을 끓인다고 가정할 때 라면을 끓이는 부분까지는 같다. 공통된 조리과정을 각각 넣는 것은 비효율적이기때문에 공통된 조리법을 골라 부모클래스로 만드는 작업이 추상화이다.
==> 프로그램에서 공통적으로 자주 사용하는 부분이 있다면 그것을 좀 더 편리하고 효율적으로 사용하기 위해 class로 만들어 놓는듯하다.

5.Generalization(일반화) / Inheritance(상속)
- 일반화란 여러 객체들이 가진 많은 특성 중에서 공통된 특성들을 추출해내고 부각시켜서 하나의 개념이나 법칙으로 성립시키는것이다.
- 자식 클래스는 부모 클래스를 선택해서, 그 부모의 멤버를 상속받아 그대로 쓸 수 있게된다. 하지만 부모 클래스의 접근 제한을 갖는 필드 및 메소드는 자식이 물려받을 수 없다.
==> 아이폰11, 갤럭시 노트, 플립z는 스마트폰이다.와 같이 법칙으로 성립해두고, 하위 클래스에서 필요한 부분이 있다면 가져다쓰는 개념인 것같다. 추상화랑 비슷한 느낌이라 헷갈린다. 강의때 추상화와 일반화의 차이점에 대해 잘 정리해둬야겠다.
==> 상속은 말그대로 추상화/일반화로 만들어놓은 객체?를 필요한 부분만 가져다쓰는 개념인듯하다.

6.Specialization(구체적)
- 상속받으면서 부모의 기능에다가 기능을 추가시키면서 세분화 시키는 특징이다.
==> 위 추상화 개념의 예시처럼 라면을 끓일 때 라면끓이는 것까지는 객체를 만들어두고 추가로 필요한 떡, 치즈등을 넣는 것처럼 필요한 개념을 상속받아 사용한 후 추가적으로 사용해야할 것을 추가해 필요한 프로그램을 작성하는 것같다.

7.Realization
- 실체화는 인터페이스를 구현받아 추상 메서드를 오버라이딩 하는 것을 의미한다.
==> 정확한 의미는 나오지않지만, 인터페이스와 그것을 구현한 것과의 관계라고 한다. 인터페이스를 구현하는 과정인 것같다.

8.Association
- 모든 객체가 각자의 라이프사이클을 가지고 있고, 어떤 객체가 다른 객체를 소유하지는 않는 경우이다.
==> 참조와 비슷한 개념인 것같다. 객체는 각자 다른 개념들을 품고있고, 다른 객체들과 관련이 되어있지만, 서로 소유하고 있는 관계는 아닌(다른 객체가 사라진다고, 해당 객체가 없어지진않음) 관계인 것같다.

9.dependency
- 의존 관계는 어떤 클래스가 다른 클래스를 참조하는 것을 의미한다. 이 참조 형태는 객체 생성이나 사용 메서드 호출, 매개변수로 객체 사용등이며 해당 객체는 사용 후 참조를 유지하지 않음.
==> 오늘 배웠던 call by refernce와 call by value 중간의 개념인 것같다. 필요에 의해 가져다쓰지만(참조) 그 후에는 참조를 유지하지 않고, 고유의 값을 갖는다는 의미인 것같다.

10. polymorphism
- 같은 자료형에 여러가지 객체를 대입하여 다양한 결과를 얻어내는 성질을 의미한다.
==> int라는 자료형에 a, b, c 라는 변수를 선언하고 값을 대입하여 사용하듯 미리 만들어놓은 것에 내가 필요한 값을 대입하여 사용할 수 있는 성질인 것같다.

11.Encapuslation / 절차은닉 / 정보은익
- 객체의 필드와 메소드를 하나로 묶고, 실제 구현 내용을 외부에 감춘다. 캡슐화는 외부의 잘못된 사용으로 인해 객체가 침해 당하지 않게 한다. 캡슐화는 높은 응집도와 낮은 결합도가 필수임.
==> 클래스를 만들고 해당 클래스를 사용할 때는 클래스명만을 입력해 사용하는 것을 뜻하는듯 하다. (클래스의 자세한 정보와 절차는 공개되지 않으나, 사용가능 함.)





