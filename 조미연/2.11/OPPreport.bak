1.OOP(Object Orientes Programming)
- OOP는 말그대로 객제 지향적인 프로그래밍을 뜻한다. C언어같은 절차지향적인 프로그래밍이 아닌 객체의 관점에서 프로그래밍을 한다는 것이다. OOP는 객체를 기준으로 코드를 나누어 구현한다. 자바의 경우 그 구성 부분 단위가 클래스이다. 자세히 말하자면 클래스는 설계도고 직접 일을 하는 구현체는 인스턴스다.
==> 클래스라는 객체를 만들어 기본 틀을 잡고, 그것을 기준으로 구현하는 프로그래밍인 것같다.

2.Object
- 객체랑 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신과 다른 것을 식별 가능 한 것을 말한다. 예를 들어 물리적으로 존재하는 학생, 회원 등과 추상적인 생산, 주문, 배송 등이 모두 객체가 될 수 있다.
- 객체는 속성과 동작으로 구성되어 있다. 예를 들면 사람의 속성으로는 이름, 나이 등이 있다. 그리고 동작은 달리다, 공부하다 등이 있다. 자바에서 이러한 객체의 속성을 필드, 동작을 메소드라고 한다.
==>클래스(객체)라는 것을 만들어 그안에 필드, 메소드를 만드는 개념인 것같다. 이것을 기준으로 실행되는 것이 자바.

3.Class
- 클래스는 유사한 특징을 지닌 객체들의 속성과 동작을 묶어놓은 집합체이다. 예를 들어 학생이라는 클래스를 만든다면 이름, 학번, 전공 등을 속성으로 둘 수 있다.
==> 위 1~2번과 연결된 개념이고, 클래스라는 것이 기본적인 틀이되는 것같다. 예를 들면 설계도같은 느낌이다. 자바는 OOP이기때문에  class(=객체)가 필수적인 요소인 것같다. 자바를 사용할 때 제일 기초되는 개념이란 생각이 든다.

4. Abstraction(추상화)
- 추상화란 여러 객체에 공통적으로 사용되는, 사용되어야 하는 내용을 뽑아내는 것을 말한다. 예를들면 치즈/떡라면을 끓인다고 가정할 때 라면을 끓이는 부분까지는 같다. 공통된 조리과정을 각각 넣는 것은 비효율적이기때문에 공통된 조리법을 골라 부모클래스로 만드는 작업이 추상화이다.
==>